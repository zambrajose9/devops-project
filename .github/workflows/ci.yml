name: CI Pipeline

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. Actualizar el repositorio
    - name: Check out the repository
      uses: actions/checkout@v3

    # 2. Configurar Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # 3. Instalar Docker Compose
    - name: Install Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.11.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
        docker-compose version

    # Cargar variables de entorno
    - name: Export Environment Variables
      run: |
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env
        echo "GF_SECURITY_ADMIN_PASSWORD=${{ secrets.GF_SECURITY_ADMIN_PASSWORD }}" >> .env

    # 4. Construir y levantar los servicios usando Docker Compose
    - name: Build and Start Services
      run: |
        docker-compose up --build -d
        docker ps -a  # Verifica si los contenedores están corriendo

    # 5. Verificar conexión a MongoDB usando Docker
    - name: Verify MongoDB connection
      run: |
        docker run --rm bitnami/mongodb:6.0 mongosh "${{ secrets.MONGO_URI }}" --eval "db.stats()"

    # 6. Esperar a que la API esté disponible
    - name: Wait for API to start
      run: |
        for i in {1..10}; do
          curl -f http://localhost:8000/docs && break
          echo "Waiting for API..."
          sleep 5
        done

    # 7. Ejecutar pruebas unitarias con pytest
    - name: Run Unit Tests
      run: |
        docker-compose exec app python -m pytest

    # 8. Apagar servicios al final
    - name: Tear down Docker Compose
      run: docker-compose down
